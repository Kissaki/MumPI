<?php
//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.3
//
// <auto-generated>
//
// Generated from file `Murmur.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


namespace
{
    require_once 'Ice/SliceChecksumDict.php';
}

namespace Murmur
{
    global $Murmur__t_NetAddress;

    if(!isset($Murmur__t_NetAddress))
    {
        global $IcePHP__t_byte;
        $Murmur__t_NetAddress = IcePHP_defineSequence('::Murmur::NetAddress', $IcePHP__t_byte);
    }
}

namespace Murmur
{
    global $Murmur__t_User;
    class User
    {
        public function __construct($session=0, $userid=0, $mute=false, $deaf=false, $suppress=false, $prioritySpeaker=false, $selfMute=false, $selfDeaf=false, $recording=false, $channel=0, $name='', $onlinesecs=0, $bytespersec=0, $version=0, $release='', $os='', $osversion='', $identity='', $context='', $comment='', $address=null, $tcponly=false, $idlesecs=0, $udpPing=0.0, $tcpPing=0.0)
        {
            $this->session = $session;
            $this->userid = $userid;
            $this->mute = $mute;
            $this->deaf = $deaf;
            $this->suppress = $suppress;
            $this->prioritySpeaker = $prioritySpeaker;
            $this->selfMute = $selfMute;
            $this->selfDeaf = $selfDeaf;
            $this->recording = $recording;
            $this->channel = $channel;
            $this->name = $name;
            $this->onlinesecs = $onlinesecs;
            $this->bytespersec = $bytespersec;
            $this->version = $version;
            $this->release = $release;
            $this->os = $os;
            $this->osversion = $osversion;
            $this->identity = $identity;
            $this->context = $context;
            $this->comment = $comment;
            $this->address = $address;
            $this->tcponly = $tcponly;
            $this->idlesecs = $idlesecs;
            $this->udpPing = $udpPing;
            $this->tcpPing = $tcpPing;
        }

        public function __toString()
        {
            global $Murmur__t_User;
            return IcePHP_stringify($this, $Murmur__t_User);
        }

        public $session;
        public $userid;
        public $mute;
        public $deaf;
        public $suppress;
        public $prioritySpeaker;
        public $selfMute;
        public $selfDeaf;
        public $recording;
        public $channel;
        public $name;
        public $onlinesecs;
        public $bytespersec;
        public $version;
        public $release;
        public $os;
        public $osversion;
        public $identity;
        public $context;
        public $comment;
        public $address;
        public $tcponly;
        public $idlesecs;
        public $udpPing;
        public $tcpPing;
    }

    global $IcePHP__t_int;
    global $IcePHP__t_bool;
    global $IcePHP__t_string;
    global $Murmur__t_NetAddress;
    global $IcePHP__t_float;
    $Murmur__t_User = IcePHP_defineStruct('::Murmur::User', '\\Murmur\\User', array(
        array('session', $IcePHP__t_int),
        array('userid', $IcePHP__t_int),
        array('mute', $IcePHP__t_bool),
        array('deaf', $IcePHP__t_bool),
        array('suppress', $IcePHP__t_bool),
        array('prioritySpeaker', $IcePHP__t_bool),
        array('selfMute', $IcePHP__t_bool),
        array('selfDeaf', $IcePHP__t_bool),
        array('recording', $IcePHP__t_bool),
        array('channel', $IcePHP__t_int),
        array('name', $IcePHP__t_string),
        array('onlinesecs', $IcePHP__t_int),
        array('bytespersec', $IcePHP__t_int),
        array('version', $IcePHP__t_int),
        array('release', $IcePHP__t_string),
        array('os', $IcePHP__t_string),
        array('osversion', $IcePHP__t_string),
        array('identity', $IcePHP__t_string),
        array('context', $IcePHP__t_string),
        array('comment', $IcePHP__t_string),
        array('address', $Murmur__t_NetAddress),
        array('tcponly', $IcePHP__t_bool),
        array('idlesecs', $IcePHP__t_int),
        array('udpPing', $IcePHP__t_float),
        array('tcpPing', $IcePHP__t_float)));
}

namespace Murmur
{
    global $Murmur__t_IntList;

    if(!isset($Murmur__t_IntList))
    {
        global $IcePHP__t_int;
        $Murmur__t_IntList = IcePHP_defineSequence('::Murmur::IntList', $IcePHP__t_int);
    }
}

namespace Murmur
{
    global $Murmur__t_TextMessage;
    class TextMessage
    {
        public function __construct($sessions=null, $channels=null, $trees=null, $text='')
        {
            $this->sessions = $sessions;
            $this->channels = $channels;
            $this->trees = $trees;
            $this->text = $text;
        }

        public function __toString()
        {
            global $Murmur__t_TextMessage;
            return IcePHP_stringify($this, $Murmur__t_TextMessage);
        }

        public $sessions;
        public $channels;
        public $trees;
        public $text;
    }

    global $Murmur__t_IntList;
    global $IcePHP__t_string;
    $Murmur__t_TextMessage = IcePHP_defineStruct('::Murmur::TextMessage', '\\Murmur\\TextMessage', array(
        array('sessions', $Murmur__t_IntList),
        array('channels', $Murmur__t_IntList),
        array('trees', $Murmur__t_IntList),
        array('text', $IcePHP__t_string)));
}

namespace Murmur
{
    global $Murmur__t_Channel;
    class Channel
    {
        public function __construct($id=0, $name='', $parent=0, $links=null, $description='', $temporary=false, $position=0)
        {
            $this->id = $id;
            $this->name = $name;
            $this->parent = $parent;
            $this->links = $links;
            $this->description = $description;
            $this->temporary = $temporary;
            $this->position = $position;
        }

        public function __toString()
        {
            global $Murmur__t_Channel;
            return IcePHP_stringify($this, $Murmur__t_Channel);
        }

        public $id;
        public $name;
        public $parent;
        public $links;
        public $description;
        public $temporary;
        public $position;
    }

    global $IcePHP__t_int;
    global $IcePHP__t_string;
    global $Murmur__t_IntList;
    global $IcePHP__t_bool;
    $Murmur__t_Channel = IcePHP_defineStruct('::Murmur::Channel', '\\Murmur\\Channel', array(
        array('id', $IcePHP__t_int),
        array('name', $IcePHP__t_string),
        array('parent', $IcePHP__t_int),
        array('links', $Murmur__t_IntList),
        array('description', $IcePHP__t_string),
        array('temporary', $IcePHP__t_bool),
        array('position', $IcePHP__t_int)));
}

namespace Murmur
{
    global $Murmur__t_Group;
    class Group
    {
        public function __construct($name='', $inherited=false, $inherit=false, $inheritable=false, $add=null, $remove=null, $members=null)
        {
            $this->name = $name;
            $this->inherited = $inherited;
            $this->inherit = $inherit;
            $this->inheritable = $inheritable;
            $this->add = $add;
            $this->remove = $remove;
            $this->members = $members;
        }

        public function __toString()
        {
            global $Murmur__t_Group;
            return IcePHP_stringify($this, $Murmur__t_Group);
        }

        public $name;
        public $inherited;
        public $inherit;
        public $inheritable;
        public $add;
        public $remove;
        public $members;
    }

    global $IcePHP__t_string;
    global $IcePHP__t_bool;
    global $Murmur__t_IntList;
    $Murmur__t_Group = IcePHP_defineStruct('::Murmur::Group', '\\Murmur\\Group', array(
        array('name', $IcePHP__t_string),
        array('inherited', $IcePHP__t_bool),
        array('inherit', $IcePHP__t_bool),
        array('inheritable', $IcePHP__t_bool),
        array('add', $Murmur__t_IntList),
        array('remove', $Murmur__t_IntList),
        array('members', $Murmur__t_IntList)));
}

namespace Murmur
{
    if(!defined('\\Murmur\\PermissionWrite'))
    {
        define(__NAMESPACE__ . '\\PermissionWrite', 1);
    }
}

namespace Murmur
{
    if(!defined('\\Murmur\\PermissionTraverse'))
    {
        define(__NAMESPACE__ . '\\PermissionTraverse', 2);
    }
}

namespace Murmur
{
    if(!defined('\\Murmur\\PermissionEnter'))
    {
        define(__NAMESPACE__ . '\\PermissionEnter', 4);
    }
}

namespace Murmur
{
    if(!defined('\\Murmur\\PermissionSpeak'))
    {
        define(__NAMESPACE__ . '\\PermissionSpeak', 8);
    }
}

namespace Murmur
{
    if(!defined('\\Murmur\\PermissionWhisper'))
    {
        define(__NAMESPACE__ . '\\PermissionWhisper', 256);
    }
}

namespace Murmur
{
    if(!defined('\\Murmur\\PermissionMuteDeafen'))
    {
        define(__NAMESPACE__ . '\\PermissionMuteDeafen', 16);
    }
}

namespace Murmur
{
    if(!defined('\\Murmur\\PermissionMove'))
    {
        define(__NAMESPACE__ . '\\PermissionMove', 32);
    }
}

namespace Murmur
{
    if(!defined('\\Murmur\\PermissionMakeChannel'))
    {
        define(__NAMESPACE__ . '\\PermissionMakeChannel', 64);
    }
}

namespace Murmur
{
    if(!defined('\\Murmur\\PermissionMakeTempChannel'))
    {
        define(__NAMESPACE__ . '\\PermissionMakeTempChannel', 1024);
    }
}

namespace Murmur
{
    if(!defined('\\Murmur\\PermissionLinkChannel'))
    {
        define(__NAMESPACE__ . '\\PermissionLinkChannel', 128);
    }
}

namespace Murmur
{
    if(!defined('\\Murmur\\PermissionTextMessage'))
    {
        define(__NAMESPACE__ . '\\PermissionTextMessage', 512);
    }
}

namespace Murmur
{
    if(!defined('\\Murmur\\PermissionKick'))
    {
        define(__NAMESPACE__ . '\\PermissionKick', 65536);
    }
}

namespace Murmur
{
    if(!defined('\\Murmur\\PermissionBan'))
    {
        define(__NAMESPACE__ . '\\PermissionBan', 131072);
    }
}

namespace Murmur
{
    if(!defined('\\Murmur\\PermissionRegister'))
    {
        define(__NAMESPACE__ . '\\PermissionRegister', 262144);
    }
}

namespace Murmur
{
    if(!defined('\\Murmur\\PermissionRegisterSelf'))
    {
        define(__NAMESPACE__ . '\\PermissionRegisterSelf', 524288);
    }
}

namespace Murmur
{
    global $Murmur__t_ACL;
    class ACL
    {
        public function __construct($applyHere=false, $applySubs=false, $inherited=false, $userid=0, $group='', $allow=0, $deny=0)
        {
            $this->applyHere = $applyHere;
            $this->applySubs = $applySubs;
            $this->inherited = $inherited;
            $this->userid = $userid;
            $this->group = $group;
            $this->allow = $allow;
            $this->deny = $deny;
        }

        public function __toString()
        {
            global $Murmur__t_ACL;
            return IcePHP_stringify($this, $Murmur__t_ACL);
        }

        public $applyHere;
        public $applySubs;
        public $inherited;
        public $userid;
        public $group;
        public $allow;
        public $deny;
    }

    global $IcePHP__t_bool;
    global $IcePHP__t_int;
    global $IcePHP__t_string;
    $Murmur__t_ACL = IcePHP_defineStruct('::Murmur::ACL', '\\Murmur\\ACL', array(
        array('applyHere', $IcePHP__t_bool),
        array('applySubs', $IcePHP__t_bool),
        array('inherited', $IcePHP__t_bool),
        array('userid', $IcePHP__t_int),
        array('group', $IcePHP__t_string),
        array('allow', $IcePHP__t_int),
        array('deny', $IcePHP__t_int)));
}

namespace Murmur
{
    global $Murmur__t_Ban;
    class Ban
    {
        public function __construct($address=null, $bits=0, $name='', $hash='', $reason='', $start=0, $duration=0)
        {
            $this->address = $address;
            $this->bits = $bits;
            $this->name = $name;
            $this->hash = $hash;
            $this->reason = $reason;
            $this->start = $start;
            $this->duration = $duration;
        }

        public function __toString()
        {
            global $Murmur__t_Ban;
            return IcePHP_stringify($this, $Murmur__t_Ban);
        }

        public $address;
        public $bits;
        public $name;
        public $hash;
        public $reason;
        public $start;
        public $duration;
    }

    global $Murmur__t_NetAddress;
    global $IcePHP__t_int;
    global $IcePHP__t_string;
    $Murmur__t_Ban = IcePHP_defineStruct('::Murmur::Ban', '\\Murmur\\Ban', array(
        array('address', $Murmur__t_NetAddress),
        array('bits', $IcePHP__t_int),
        array('name', $IcePHP__t_string),
        array('hash', $IcePHP__t_string),
        array('reason', $IcePHP__t_string),
        array('start', $IcePHP__t_int),
        array('duration', $IcePHP__t_int)));
}

namespace Murmur
{
    global $Murmur__t_LogEntry;
    class LogEntry
    {
        public function __construct($timestamp=0, $txt='')
        {
            $this->timestamp = $timestamp;
            $this->txt = $txt;
        }

        public function __toString()
        {
            global $Murmur__t_LogEntry;
            return IcePHP_stringify($this, $Murmur__t_LogEntry);
        }

        public $timestamp;
        public $txt;
    }

    global $IcePHP__t_int;
    global $IcePHP__t_string;
    $Murmur__t_LogEntry = IcePHP_defineStruct('::Murmur::LogEntry', '\\Murmur\\LogEntry', array(
        array('timestamp', $IcePHP__t_int),
        array('txt', $IcePHP__t_string)));
}

namespace Murmur
{
    global $Murmur__t_Tree;
    if(!isset($Murmur__t_Tree))
    {
        $Murmur__t_Tree = IcePHP_declareClass('::Murmur::Tree');
    }
}

namespace Murmur
{
    global $Murmur__t_TreeList;

    if(!isset($Murmur__t_TreeList))
    {
        global $Murmur__t_Tree;
        $Murmur__t_TreeList = IcePHP_defineSequence('::Murmur::TreeList', $Murmur__t_Tree);
    }
}

namespace Murmur
{
    global $Murmur__t_ChannelInfo;
    class ChannelInfo
    {
        const ChannelDescription = 0;
        const ChannelPosition = 1;
    }

    $Murmur__t_ChannelInfo = IcePHP_defineEnum('::Murmur::ChannelInfo', array('ChannelDescription', 0, 'ChannelPosition', 1));
}

namespace Murmur
{
    global $Murmur__t_UserInfo;
    class UserInfo
    {
        const UserName = 0;
        const UserEmail = 1;
        const UserComment = 2;
        const UserHash = 3;
        const UserPassword = 4;
        const UserLastActive = 5;
    }

    $Murmur__t_UserInfo = IcePHP_defineEnum('::Murmur::UserInfo', array('UserName', 0, 'UserEmail', 1, 'UserComment', 2, 'UserHash', 3, 'UserPassword', 4, 'UserLastActive', 5));
}

namespace Murmur
{
    global $Murmur__t_UserMap;

    if(!isset($Murmur__t_UserMap))
    {
        global $IcePHP__t_int;
        global $Murmur__t_User;
        $Murmur__t_UserMap = IcePHP_defineDictionary('::Murmur::UserMap', $IcePHP__t_int, $Murmur__t_User);
    }
}

namespace Murmur
{
    global $Murmur__t_ChannelMap;

    if(!isset($Murmur__t_ChannelMap))
    {
        global $IcePHP__t_int;
        global $Murmur__t_Channel;
        $Murmur__t_ChannelMap = IcePHP_defineDictionary('::Murmur::ChannelMap', $IcePHP__t_int, $Murmur__t_Channel);
    }
}

namespace Murmur
{
    global $Murmur__t_ChannelList;

    if(!isset($Murmur__t_ChannelList))
    {
        global $Murmur__t_Channel;
        $Murmur__t_ChannelList = IcePHP_defineSequence('::Murmur::ChannelList', $Murmur__t_Channel);
    }
}

namespace Murmur
{
    global $Murmur__t_UserList;

    if(!isset($Murmur__t_UserList))
    {
        global $Murmur__t_User;
        $Murmur__t_UserList = IcePHP_defineSequence('::Murmur::UserList', $Murmur__t_User);
    }
}

namespace Murmur
{
    global $Murmur__t_GroupList;

    if(!isset($Murmur__t_GroupList))
    {
        global $Murmur__t_Group;
        $Murmur__t_GroupList = IcePHP_defineSequence('::Murmur::GroupList', $Murmur__t_Group);
    }
}

namespace Murmur
{
    global $Murmur__t_ACLList;

    if(!isset($Murmur__t_ACLList))
    {
        global $Murmur__t_ACL;
        $Murmur__t_ACLList = IcePHP_defineSequence('::Murmur::ACLList', $Murmur__t_ACL);
    }
}

namespace Murmur
{
    global $Murmur__t_LogList;

    if(!isset($Murmur__t_LogList))
    {
        global $Murmur__t_LogEntry;
        $Murmur__t_LogList = IcePHP_defineSequence('::Murmur::LogList', $Murmur__t_LogEntry);
    }
}

namespace Murmur
{
    global $Murmur__t_BanList;

    if(!isset($Murmur__t_BanList))
    {
        global $Murmur__t_Ban;
        $Murmur__t_BanList = IcePHP_defineSequence('::Murmur::BanList', $Murmur__t_Ban);
    }
}

namespace Murmur
{
    global $Murmur__t_IdList;

    if(!isset($Murmur__t_IdList))
    {
        global $IcePHP__t_int;
        $Murmur__t_IdList = IcePHP_defineSequence('::Murmur::IdList', $IcePHP__t_int);
    }
}

namespace Murmur
{
    global $Murmur__t_NameList;

    if(!isset($Murmur__t_NameList))
    {
        global $IcePHP__t_string;
        $Murmur__t_NameList = IcePHP_defineSequence('::Murmur::NameList', $IcePHP__t_string);
    }
}

namespace Murmur
{
    global $Murmur__t_NameMap;

    if(!isset($Murmur__t_NameMap))
    {
        global $IcePHP__t_int;
        global $IcePHP__t_string;
        $Murmur__t_NameMap = IcePHP_defineDictionary('::Murmur::NameMap', $IcePHP__t_int, $IcePHP__t_string);
    }
}

namespace Murmur
{
    global $Murmur__t_IdMap;

    if(!isset($Murmur__t_IdMap))
    {
        global $IcePHP__t_string;
        global $IcePHP__t_int;
        $Murmur__t_IdMap = IcePHP_defineDictionary('::Murmur::IdMap', $IcePHP__t_string, $IcePHP__t_int);
    }
}

namespace Murmur
{
    global $Murmur__t_Texture;

    if(!isset($Murmur__t_Texture))
    {
        global $IcePHP__t_byte;
        $Murmur__t_Texture = IcePHP_defineSequence('::Murmur::Texture', $IcePHP__t_byte);
    }
}

namespace Murmur
{
    global $Murmur__t_ConfigMap;

    if(!isset($Murmur__t_ConfigMap))
    {
        global $IcePHP__t_string;
        global $IcePHP__t_string;
        $Murmur__t_ConfigMap = IcePHP_defineDictionary('::Murmur::ConfigMap', $IcePHP__t_string, $IcePHP__t_string);
    }
}

namespace Murmur
{
    global $Murmur__t_GroupNameList;

    if(!isset($Murmur__t_GroupNameList))
    {
        global $IcePHP__t_string;
        $Murmur__t_GroupNameList = IcePHP_defineSequence('::Murmur::GroupNameList', $IcePHP__t_string);
    }
}

namespace Murmur
{
    global $Murmur__t_CertificateDer;

    if(!isset($Murmur__t_CertificateDer))
    {
        global $IcePHP__t_byte;
        $Murmur__t_CertificateDer = IcePHP_defineSequence('::Murmur::CertificateDer', $IcePHP__t_byte);
    }
}

namespace Murmur
{
    global $Murmur__t_CertificateList;

    if(!isset($Murmur__t_CertificateList))
    {
        global $Murmur__t_CertificateDer;
        $Murmur__t_CertificateList = IcePHP_defineSequence('::Murmur::CertificateList', $Murmur__t_CertificateDer);
    }
}

namespace Murmur
{
    global $Murmur__t_UserInfoMap;

    if(!isset($Murmur__t_UserInfoMap))
    {
        global $Murmur__t_UserInfo;
        global $IcePHP__t_string;
        $Murmur__t_UserInfoMap = IcePHP_defineDictionary('::Murmur::UserInfoMap', $Murmur__t_UserInfo, $IcePHP__t_string);
    }
}

namespace Murmur
{
    global $Murmur__t_Tree;
    class Tree extends \Ice\Value
    {
        public function __construct($c=null, $children=null, $users=null)
        {
            $this->c = is_null($c) ? new \Murmur\Channel : $c;
            $this->children = $children;
            $this->users = $users;
        }

        public function ice_id()
        {
            return '::Murmur::Tree';
        }

        public static function ice_staticId()
        {
            return '::Murmur::Tree';
        }

        public function __toString()
        {
            global $Murmur__t_Tree;
            return IcePHP_stringify($this, $Murmur__t_Tree);
        }

        public $c;
        public $children;
        public $users;
    }

    global $Ice__t_Value;
    global $Murmur__t_Channel;
    global $Murmur__t_TreeList;
    global $Murmur__t_UserList;
    $Murmur__t_Tree = IcePHP_defineClass('::Murmur::Tree', '\\Murmur\\Tree', -1, false, false, $Ice__t_Value, array(
        array('c', $Murmur__t_Channel, false, 0),
        array('children', $Murmur__t_TreeList, false, 0),
        array('users', $Murmur__t_UserList, false, 0)));
}

namespace Murmur
{
    global $Murmur__t_MurmurException;
    class MurmurException extends \Ice\UserException
    {
        public function __construct()
        {
        }

        public function ice_id()
        {
            return '::Murmur::MurmurException';
        }

        public function __toString()
        {
            global $Murmur__t_MurmurException;
            return IcePHP_stringifyException($this, $Murmur__t_MurmurException);
        }
    }

    $Murmur__t_MurmurException = IcePHP_defineException('::Murmur::MurmurException', '\\Murmur\\MurmurException', false, null, null);
}

namespace Murmur
{
    global $Murmur__t_InvalidSessionException;
    class InvalidSessionException extends \Murmur\MurmurException
    {
        public function __construct()
        {
            parent::__construct();
        }

        public function ice_id()
        {
            return '::Murmur::InvalidSessionException';
        }

        public function __toString()
        {
            global $Murmur__t_InvalidSessionException;
            return IcePHP_stringifyException($this, $Murmur__t_InvalidSessionException);
        }
    }

    $Murmur__t_InvalidSessionException = IcePHP_defineException('::Murmur::InvalidSessionException', '\\Murmur\\InvalidSessionException', false, $Murmur__t_MurmurException, null);
}

namespace Murmur
{
    global $Murmur__t_InvalidChannelException;
    class InvalidChannelException extends \Murmur\MurmurException
    {
        public function __construct()
        {
            parent::__construct();
        }

        public function ice_id()
        {
            return '::Murmur::InvalidChannelException';
        }

        public function __toString()
        {
            global $Murmur__t_InvalidChannelException;
            return IcePHP_stringifyException($this, $Murmur__t_InvalidChannelException);
        }
    }

    $Murmur__t_InvalidChannelException = IcePHP_defineException('::Murmur::InvalidChannelException', '\\Murmur\\InvalidChannelException', false, $Murmur__t_MurmurException, null);
}

namespace Murmur
{
    global $Murmur__t_InvalidServerException;
    class InvalidServerException extends \Murmur\MurmurException
    {
        public function __construct()
        {
            parent::__construct();
        }

        public function ice_id()
        {
            return '::Murmur::InvalidServerException';
        }

        public function __toString()
        {
            global $Murmur__t_InvalidServerException;
            return IcePHP_stringifyException($this, $Murmur__t_InvalidServerException);
        }
    }

    $Murmur__t_InvalidServerException = IcePHP_defineException('::Murmur::InvalidServerException', '\\Murmur\\InvalidServerException', false, $Murmur__t_MurmurException, null);
}

namespace Murmur
{
    global $Murmur__t_ServerBootedException;
    class ServerBootedException extends \Murmur\MurmurException
    {
        public function __construct()
        {
            parent::__construct();
        }

        public function ice_id()
        {
            return '::Murmur::ServerBootedException';
        }

        public function __toString()
        {
            global $Murmur__t_ServerBootedException;
            return IcePHP_stringifyException($this, $Murmur__t_ServerBootedException);
        }
    }

    $Murmur__t_ServerBootedException = IcePHP_defineException('::Murmur::ServerBootedException', '\\Murmur\\ServerBootedException', false, $Murmur__t_MurmurException, null);
}

namespace Murmur
{
    global $Murmur__t_ServerFailureException;
    class ServerFailureException extends \Murmur\MurmurException
    {
        public function __construct()
        {
            parent::__construct();
        }

        public function ice_id()
        {
            return '::Murmur::ServerFailureException';
        }

        public function __toString()
        {
            global $Murmur__t_ServerFailureException;
            return IcePHP_stringifyException($this, $Murmur__t_ServerFailureException);
        }
    }

    $Murmur__t_ServerFailureException = IcePHP_defineException('::Murmur::ServerFailureException', '\\Murmur\\ServerFailureException', false, $Murmur__t_MurmurException, null);
}

namespace Murmur
{
    global $Murmur__t_InvalidUserException;
    class InvalidUserException extends \Murmur\MurmurException
    {
        public function __construct()
        {
            parent::__construct();
        }

        public function ice_id()
        {
            return '::Murmur::InvalidUserException';
        }

        public function __toString()
        {
            global $Murmur__t_InvalidUserException;
            return IcePHP_stringifyException($this, $Murmur__t_InvalidUserException);
        }
    }

    $Murmur__t_InvalidUserException = IcePHP_defineException('::Murmur::InvalidUserException', '\\Murmur\\InvalidUserException', false, $Murmur__t_MurmurException, null);
}

namespace Murmur
{
    global $Murmur__t_InvalidTextureException;
    class InvalidTextureException extends \Murmur\MurmurException
    {
        public function __construct()
        {
            parent::__construct();
        }

        public function ice_id()
        {
            return '::Murmur::InvalidTextureException';
        }

        public function __toString()
        {
            global $Murmur__t_InvalidTextureException;
            return IcePHP_stringifyException($this, $Murmur__t_InvalidTextureException);
        }
    }

    $Murmur__t_InvalidTextureException = IcePHP_defineException('::Murmur::InvalidTextureException', '\\Murmur\\InvalidTextureException', false, $Murmur__t_MurmurException, null);
}

namespace Murmur
{
    global $Murmur__t_InvalidCallbackException;
    class InvalidCallbackException extends \Murmur\MurmurException
    {
        public function __construct()
        {
            parent::__construct();
        }

        public function ice_id()
        {
            return '::Murmur::InvalidCallbackException';
        }

        public function __toString()
        {
            global $Murmur__t_InvalidCallbackException;
            return IcePHP_stringifyException($this, $Murmur__t_InvalidCallbackException);
        }
    }

    $Murmur__t_InvalidCallbackException = IcePHP_defineException('::Murmur::InvalidCallbackException', '\\Murmur\\InvalidCallbackException', false, $Murmur__t_MurmurException, null);
}

namespace Murmur
{
    global $Murmur__t_InvalidSecretException;
    class InvalidSecretException extends \Murmur\MurmurException
    {
        public function __construct()
        {
            parent::__construct();
        }

        public function ice_id()
        {
            return '::Murmur::InvalidSecretException';
        }

        public function __toString()
        {
            global $Murmur__t_InvalidSecretException;
            return IcePHP_stringifyException($this, $Murmur__t_InvalidSecretException);
        }
    }

    $Murmur__t_InvalidSecretException = IcePHP_defineException('::Murmur::InvalidSecretException', '\\Murmur\\InvalidSecretException', false, $Murmur__t_MurmurException, null);
}

namespace Murmur
{
    global $Murmur__t_NestingLimitException;
    class NestingLimitException extends \Murmur\MurmurException
    {
        public function __construct()
        {
            parent::__construct();
        }

        public function ice_id()
        {
            return '::Murmur::NestingLimitException';
        }

        public function __toString()
        {
            global $Murmur__t_NestingLimitException;
            return IcePHP_stringifyException($this, $Murmur__t_NestingLimitException);
        }
    }

    $Murmur__t_NestingLimitException = IcePHP_defineException('::Murmur::NestingLimitException', '\\Murmur\\NestingLimitException', false, $Murmur__t_MurmurException, null);
}

namespace Murmur
{
    global $Murmur__t_WriteOnlyException;
    class WriteOnlyException extends \Murmur\MurmurException
    {
        public function __construct()
        {
            parent::__construct();
        }

        public function ice_id()
        {
            return '::Murmur::WriteOnlyException';
        }

        public function __toString()
        {
            global $Murmur__t_WriteOnlyException;
            return IcePHP_stringifyException($this, $Murmur__t_WriteOnlyException);
        }
    }

    $Murmur__t_WriteOnlyException = IcePHP_defineException('::Murmur::WriteOnlyException', '\\Murmur\\WriteOnlyException', false, $Murmur__t_MurmurException, null);
}

namespace Murmur
{
    global $Murmur__t_InvalidInputDataException;
    class InvalidInputDataException extends \Murmur\MurmurException
    {
        public function __construct()
        {
            parent::__construct();
        }

        public function ice_id()
        {
            return '::Murmur::InvalidInputDataException';
        }

        public function __toString()
        {
            global $Murmur__t_InvalidInputDataException;
            return IcePHP_stringifyException($this, $Murmur__t_InvalidInputDataException);
        }
    }

    $Murmur__t_InvalidInputDataException = IcePHP_defineException('::Murmur::InvalidInputDataException', '\\Murmur\\InvalidInputDataException', false, $Murmur__t_MurmurException, null);
}

namespace Murmur
{
    global $Murmur__t_ServerCallback;
    global $Murmur__t_ServerCallbackPrx;

    class ServerCallbackPrxHelper
    {
        public static function checkedCast($proxy, $facetOrContext=null, $context=null)
        {
            return $proxy->ice_checkedCast('::Murmur::ServerCallback', $facetOrContext, $context);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::Murmur::ServerCallback', $facet);
        }

        public static function ice_staticId()
        {
            return '::Murmur::ServerCallback';
        }
    }
    $Murmur__t_ServerCallback = IcePHP_defineClass('::Murmur::ServerCallback', '\\Murmur\\ServerCallback', -1, false, true, null, null);

    global $Ice__t_ObjectPrx;
    $Murmur__t_ServerCallbackPrx = IcePHP_defineProxy('::Murmur::ServerCallback', $Ice__t_ObjectPrx, null);

    global $Murmur__t_User;
    global $Murmur__t_TextMessage;
    global $Murmur__t_Channel;
    IcePHP_defineOperation($Murmur__t_ServerCallbackPrx, 'userConnected', 2, 2, 0, array(array($Murmur__t_User)), null, null, null);
    IcePHP_defineOperation($Murmur__t_ServerCallbackPrx, 'userDisconnected', 2, 2, 0, array(array($Murmur__t_User)), null, null, null);
    IcePHP_defineOperation($Murmur__t_ServerCallbackPrx, 'userStateChanged', 2, 2, 0, array(array($Murmur__t_User)), null, null, null);
    IcePHP_defineOperation($Murmur__t_ServerCallbackPrx, 'userTextMessage', 2, 2, 0, array(array($Murmur__t_User), array($Murmur__t_TextMessage)), null, null, null);
    IcePHP_defineOperation($Murmur__t_ServerCallbackPrx, 'channelCreated', 2, 2, 0, array(array($Murmur__t_Channel)), null, null, null);
    IcePHP_defineOperation($Murmur__t_ServerCallbackPrx, 'channelRemoved', 2, 2, 0, array(array($Murmur__t_Channel)), null, null, null);
    IcePHP_defineOperation($Murmur__t_ServerCallbackPrx, 'channelStateChanged', 2, 2, 0, array(array($Murmur__t_Channel)), null, null, null);
}

namespace Murmur
{
    if(!defined('\\Murmur\\ContextServer'))
    {
        define(__NAMESPACE__ . '\\ContextServer', 1);
    }
}

namespace Murmur
{
    if(!defined('\\Murmur\\ContextChannel'))
    {
        define(__NAMESPACE__ . '\\ContextChannel', 2);
    }
}

namespace Murmur
{
    if(!defined('\\Murmur\\ContextUser'))
    {
        define(__NAMESPACE__ . '\\ContextUser', 4);
    }
}

namespace Murmur
{
    global $Murmur__t_ServerContextCallback;
    global $Murmur__t_ServerContextCallbackPrx;

    class ServerContextCallbackPrxHelper
    {
        public static function checkedCast($proxy, $facetOrContext=null, $context=null)
        {
            return $proxy->ice_checkedCast('::Murmur::ServerContextCallback', $facetOrContext, $context);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::Murmur::ServerContextCallback', $facet);
        }

        public static function ice_staticId()
        {
            return '::Murmur::ServerContextCallback';
        }
    }
    $Murmur__t_ServerContextCallback = IcePHP_defineClass('::Murmur::ServerContextCallback', '\\Murmur\\ServerContextCallback', -1, false, true, null, null);

    global $Ice__t_ObjectPrx;
    $Murmur__t_ServerContextCallbackPrx = IcePHP_defineProxy('::Murmur::ServerContextCallback', $Ice__t_ObjectPrx, null);

    global $IcePHP__t_string;
    global $Murmur__t_User;
    global $IcePHP__t_int;
    IcePHP_defineOperation($Murmur__t_ServerContextCallbackPrx, 'contextAction', 2, 2, 0, array(array($IcePHP__t_string), array($Murmur__t_User), array($IcePHP__t_int), array($IcePHP__t_int)), null, null, null);
}

namespace Murmur
{
    global $Murmur__t_ServerAuthenticator;
    global $Murmur__t_ServerAuthenticatorPrx;

    class ServerAuthenticatorPrxHelper
    {
        public static function checkedCast($proxy, $facetOrContext=null, $context=null)
        {
            return $proxy->ice_checkedCast('::Murmur::ServerAuthenticator', $facetOrContext, $context);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::Murmur::ServerAuthenticator', $facet);
        }

        public static function ice_staticId()
        {
            return '::Murmur::ServerAuthenticator';
        }
    }
    $Murmur__t_ServerAuthenticator = IcePHP_defineClass('::Murmur::ServerAuthenticator', '\\Murmur\\ServerAuthenticator', -1, false, true, null, null);

    global $Ice__t_ObjectPrx;
    $Murmur__t_ServerAuthenticatorPrx = IcePHP_defineProxy('::Murmur::ServerAuthenticator', $Ice__t_ObjectPrx, null);

    global $IcePHP__t_string;
    global $Murmur__t_CertificateList;
    global $IcePHP__t_bool;
    global $Murmur__t_GroupNameList;
    global $IcePHP__t_int;
    global $Murmur__t_UserInfoMap;
    global $Murmur__t_Texture;
    IcePHP_defineOperation($Murmur__t_ServerAuthenticatorPrx, 'authenticate', 2, 2, 0, array(array($IcePHP__t_string), array($IcePHP__t_string), array($Murmur__t_CertificateList), array($IcePHP__t_string), array($IcePHP__t_bool)), array(array($IcePHP__t_string), array($Murmur__t_GroupNameList)), array($IcePHP__t_int), null);
    IcePHP_defineOperation($Murmur__t_ServerAuthenticatorPrx, 'getInfo', 2, 2, 0, array(array($IcePHP__t_int)), array(array($Murmur__t_UserInfoMap)), array($IcePHP__t_bool), null);
    IcePHP_defineOperation($Murmur__t_ServerAuthenticatorPrx, 'nameToId', 2, 2, 0, array(array($IcePHP__t_string)), null, array($IcePHP__t_int), null);
    IcePHP_defineOperation($Murmur__t_ServerAuthenticatorPrx, 'idToName', 2, 2, 0, array(array($IcePHP__t_int)), null, array($IcePHP__t_string), null);
    IcePHP_defineOperation($Murmur__t_ServerAuthenticatorPrx, 'idToTexture', 2, 2, 0, array(array($IcePHP__t_int)), null, array($Murmur__t_Texture), null);
}

namespace Murmur
{
    global $Murmur__t_ServerUpdatingAuthenticator;
    global $Murmur__t_ServerUpdatingAuthenticatorPrx;

    class ServerUpdatingAuthenticatorPrxHelper
    {
        public static function checkedCast($proxy, $facetOrContext=null, $context=null)
        {
            return $proxy->ice_checkedCast('::Murmur::ServerUpdatingAuthenticator', $facetOrContext, $context);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::Murmur::ServerUpdatingAuthenticator', $facet);
        }

        public static function ice_staticId()
        {
            return '::Murmur::ServerUpdatingAuthenticator';
        }
    }
    $Murmur__t_ServerUpdatingAuthenticator = IcePHP_defineClass('::Murmur::ServerUpdatingAuthenticator', '\\Murmur\\ServerUpdatingAuthenticator', -1, false, true, null, null);

    global $Ice__t_ObjectPrx;
    $Murmur__t_ServerUpdatingAuthenticatorPrx = IcePHP_defineProxy('::Murmur::ServerUpdatingAuthenticator', $Ice__t_ObjectPrx, array($Murmur__t_ServerAuthenticatorPrx));

    global $Murmur__t_UserInfoMap;
    global $IcePHP__t_int;
    global $IcePHP__t_string;
    global $Murmur__t_NameMap;
    global $Murmur__t_Texture;
    IcePHP_defineOperation($Murmur__t_ServerUpdatingAuthenticatorPrx, 'registerUser', 0, 0, 0, array(array($Murmur__t_UserInfoMap)), null, array($IcePHP__t_int), null);
    IcePHP_defineOperation($Murmur__t_ServerUpdatingAuthenticatorPrx, 'unregisterUser', 0, 0, 0, array(array($IcePHP__t_int)), null, array($IcePHP__t_int), null);
    IcePHP_defineOperation($Murmur__t_ServerUpdatingAuthenticatorPrx, 'getRegisteredUsers', 2, 2, 0, array(array($IcePHP__t_string)), null, array($Murmur__t_NameMap), null);
    IcePHP_defineOperation($Murmur__t_ServerUpdatingAuthenticatorPrx, 'setInfo', 2, 2, 0, array(array($IcePHP__t_int), array($Murmur__t_UserInfoMap)), null, array($IcePHP__t_int), null);
    IcePHP_defineOperation($Murmur__t_ServerUpdatingAuthenticatorPrx, 'setTexture', 2, 2, 0, array(array($IcePHP__t_int), array($Murmur__t_Texture)), null, array($IcePHP__t_int), null);
}

namespace Murmur
{
    global $Murmur__t_Server;
    global $Murmur__t_ServerPrx;

    class ServerPrxHelper
    {
        public static function checkedCast($proxy, $facetOrContext=null, $context=null)
        {
            return $proxy->ice_checkedCast('::Murmur::Server', $facetOrContext, $context);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::Murmur::Server', $facet);
        }

        public static function ice_staticId()
        {
            return '::Murmur::Server';
        }
    }
    $Murmur__t_Server = IcePHP_defineClass('::Murmur::Server', '\\Murmur\\Server', -1, false, true, null, null);

    global $Ice__t_ObjectPrx;
    $Murmur__t_ServerPrx = IcePHP_defineProxy('::Murmur::Server', $Ice__t_ObjectPrx, null);

    global $IcePHP__t_bool;
    global $IcePHP__t_int;
    global $Murmur__t_ServerCallbackPrx;
    global $Murmur__t_ServerAuthenticatorPrx;
    global $IcePHP__t_string;
    global $Murmur__t_ConfigMap;
    global $Murmur__t_LogList;
    global $Murmur__t_UserMap;
    global $Murmur__t_ChannelMap;
    global $Murmur__t_CertificateList;
    global $Murmur__t_Tree;
    global $Murmur__t_BanList;
    global $Murmur__t_User;
    global $Murmur__t_ServerContextCallbackPrx;
    global $Murmur__t_Channel;
    global $Murmur__t_ACLList;
    global $Murmur__t_GroupList;
    global $Murmur__t_IdList;
    global $Murmur__t_NameMap;
    global $Murmur__t_NameList;
    global $Murmur__t_IdMap;
    global $Murmur__t_UserInfoMap;
    global $Murmur__t_Texture;
    IcePHP_defineOperation($Murmur__t_ServerPrx, 'isRunning', 2, 2, 0, null, null, array($IcePHP__t_bool), array($Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_ServerPrx, 'start', 0, 0, 0, null, null, null, array($Murmur__t_ServerBootedException, $Murmur__t_ServerFailureException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_ServerPrx, 'stop', 0, 0, 0, null, null, null, array($Murmur__t_ServerBootedException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_ServerPrx, 'delete', 0, 0, 0, null, null, null, array($Murmur__t_ServerBootedException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_ServerPrx, 'id', 2, 2, 0, null, null, array($IcePHP__t_int), array($Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_ServerPrx, 'addCallback', 0, 0, 0, array(array($Murmur__t_ServerCallbackPrx)), null, null, array($Murmur__t_ServerBootedException, $Murmur__t_InvalidCallbackException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_ServerPrx, 'removeCallback', 0, 0, 0, array(array($Murmur__t_ServerCallbackPrx)), null, null, array($Murmur__t_ServerBootedException, $Murmur__t_InvalidCallbackException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_ServerPrx, 'setAuthenticator', 0, 0, 0, array(array($Murmur__t_ServerAuthenticatorPrx)), null, null, array($Murmur__t_ServerBootedException, $Murmur__t_InvalidCallbackException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_ServerPrx, 'getConf', 2, 2, 0, array(array($IcePHP__t_string)), null, array($IcePHP__t_string), array($Murmur__t_InvalidSecretException, $Murmur__t_WriteOnlyException));
    IcePHP_defineOperation($Murmur__t_ServerPrx, 'getAllConf', 2, 2, 0, null, null, array($Murmur__t_ConfigMap), array($Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_ServerPrx, 'setConf', 2, 2, 0, array(array($IcePHP__t_string), array($IcePHP__t_string)), null, null, array($Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_ServerPrx, 'setSuperuserPassword', 2, 2, 0, array(array($IcePHP__t_string)), null, null, array($Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_ServerPrx, 'getLog', 2, 2, 0, array(array($IcePHP__t_int), array($IcePHP__t_int)), null, array($Murmur__t_LogList), array($Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_ServerPrx, 'getLogLen', 2, 2, 0, null, null, array($IcePHP__t_int), array($Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_ServerPrx, 'getUsers', 2, 2, 0, null, null, array($Murmur__t_UserMap), array($Murmur__t_ServerBootedException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_ServerPrx, 'getChannels', 2, 2, 0, null, null, array($Murmur__t_ChannelMap), array($Murmur__t_ServerBootedException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_ServerPrx, 'getCertificateList', 2, 2, 0, array(array($IcePHP__t_int)), null, array($Murmur__t_CertificateList), array($Murmur__t_ServerBootedException, $Murmur__t_InvalidSessionException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_ServerPrx, 'getTree', 2, 2, 0, null, null, array($Murmur__t_Tree), array($Murmur__t_ServerBootedException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_ServerPrx, 'getBans', 2, 2, 0, null, null, array($Murmur__t_BanList), array($Murmur__t_ServerBootedException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_ServerPrx, 'setBans', 2, 2, 0, array(array($Murmur__t_BanList)), null, null, array($Murmur__t_ServerBootedException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_ServerPrx, 'kickUser', 0, 0, 0, array(array($IcePHP__t_int), array($IcePHP__t_string)), null, null, array($Murmur__t_ServerBootedException, $Murmur__t_InvalidSessionException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_ServerPrx, 'getState', 2, 2, 0, array(array($IcePHP__t_int)), null, array($Murmur__t_User), array($Murmur__t_ServerBootedException, $Murmur__t_InvalidSessionException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_ServerPrx, 'setState', 2, 2, 0, array(array($Murmur__t_User)), null, null, array($Murmur__t_ServerBootedException, $Murmur__t_InvalidSessionException, $Murmur__t_InvalidChannelException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_ServerPrx, 'sendMessage', 0, 0, 0, array(array($IcePHP__t_int), array($IcePHP__t_string)), null, null, array($Murmur__t_ServerBootedException, $Murmur__t_InvalidSessionException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_ServerPrx, 'hasPermission', 0, 0, 0, array(array($IcePHP__t_int), array($IcePHP__t_int), array($IcePHP__t_int)), null, array($IcePHP__t_bool), array($Murmur__t_ServerBootedException, $Murmur__t_InvalidSessionException, $Murmur__t_InvalidChannelException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_ServerPrx, 'effectivePermissions', 2, 2, 0, array(array($IcePHP__t_int), array($IcePHP__t_int)), null, array($IcePHP__t_int), array($Murmur__t_ServerBootedException, $Murmur__t_InvalidSessionException, $Murmur__t_InvalidChannelException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_ServerPrx, 'addContextCallback', 0, 0, 0, array(array($IcePHP__t_int), array($IcePHP__t_string), array($IcePHP__t_string), array($Murmur__t_ServerContextCallbackPrx), array($IcePHP__t_int)), null, null, array($Murmur__t_ServerBootedException, $Murmur__t_InvalidCallbackException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_ServerPrx, 'removeContextCallback', 0, 0, 0, array(array($Murmur__t_ServerContextCallbackPrx)), null, null, array($Murmur__t_ServerBootedException, $Murmur__t_InvalidCallbackException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_ServerPrx, 'getChannelState', 2, 2, 0, array(array($IcePHP__t_int)), null, array($Murmur__t_Channel), array($Murmur__t_ServerBootedException, $Murmur__t_InvalidChannelException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_ServerPrx, 'setChannelState', 2, 2, 0, array(array($Murmur__t_Channel)), null, null, array($Murmur__t_ServerBootedException, $Murmur__t_InvalidChannelException, $Murmur__t_InvalidSecretException, $Murmur__t_NestingLimitException));
    IcePHP_defineOperation($Murmur__t_ServerPrx, 'removeChannel', 0, 0, 0, array(array($IcePHP__t_int)), null, null, array($Murmur__t_ServerBootedException, $Murmur__t_InvalidChannelException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_ServerPrx, 'addChannel', 0, 0, 0, array(array($IcePHP__t_string), array($IcePHP__t_int)), null, array($IcePHP__t_int), array($Murmur__t_ServerBootedException, $Murmur__t_InvalidChannelException, $Murmur__t_InvalidSecretException, $Murmur__t_NestingLimitException));
    IcePHP_defineOperation($Murmur__t_ServerPrx, 'sendMessageChannel', 0, 0, 0, array(array($IcePHP__t_int), array($IcePHP__t_bool), array($IcePHP__t_string)), null, null, array($Murmur__t_ServerBootedException, $Murmur__t_InvalidChannelException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_ServerPrx, 'getACL', 2, 2, 0, array(array($IcePHP__t_int)), array(array($Murmur__t_ACLList), array($Murmur__t_GroupList), array($IcePHP__t_bool)), null, array($Murmur__t_ServerBootedException, $Murmur__t_InvalidChannelException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_ServerPrx, 'setACL', 2, 2, 0, array(array($IcePHP__t_int), array($Murmur__t_ACLList), array($Murmur__t_GroupList), array($IcePHP__t_bool)), null, null, array($Murmur__t_ServerBootedException, $Murmur__t_InvalidChannelException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_ServerPrx, 'addUserToGroup', 2, 2, 0, array(array($IcePHP__t_int), array($IcePHP__t_int), array($IcePHP__t_string)), null, null, array($Murmur__t_ServerBootedException, $Murmur__t_InvalidChannelException, $Murmur__t_InvalidSessionException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_ServerPrx, 'removeUserFromGroup', 2, 2, 0, array(array($IcePHP__t_int), array($IcePHP__t_int), array($IcePHP__t_string)), null, null, array($Murmur__t_ServerBootedException, $Murmur__t_InvalidChannelException, $Murmur__t_InvalidSessionException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_ServerPrx, 'redirectWhisperGroup', 2, 2, 0, array(array($IcePHP__t_int), array($IcePHP__t_string), array($IcePHP__t_string)), null, null, array($Murmur__t_ServerBootedException, $Murmur__t_InvalidSessionException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_ServerPrx, 'getUserNames', 2, 2, 0, array(array($Murmur__t_IdList)), null, array($Murmur__t_NameMap), array($Murmur__t_ServerBootedException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_ServerPrx, 'getUserIds', 2, 2, 0, array(array($Murmur__t_NameList)), null, array($Murmur__t_IdMap), array($Murmur__t_ServerBootedException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_ServerPrx, 'registerUser', 0, 0, 0, array(array($Murmur__t_UserInfoMap)), null, array($IcePHP__t_int), array($Murmur__t_ServerBootedException, $Murmur__t_InvalidUserException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_ServerPrx, 'unregisterUser', 0, 0, 0, array(array($IcePHP__t_int)), null, null, array($Murmur__t_ServerBootedException, $Murmur__t_InvalidUserException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_ServerPrx, 'updateRegistration', 2, 2, 0, array(array($IcePHP__t_int), array($Murmur__t_UserInfoMap)), null, null, array($Murmur__t_ServerBootedException, $Murmur__t_InvalidUserException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_ServerPrx, 'getRegistration', 2, 2, 0, array(array($IcePHP__t_int)), null, array($Murmur__t_UserInfoMap), array($Murmur__t_ServerBootedException, $Murmur__t_InvalidUserException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_ServerPrx, 'getRegisteredUsers', 2, 2, 0, array(array($IcePHP__t_string)), null, array($Murmur__t_NameMap), array($Murmur__t_ServerBootedException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_ServerPrx, 'verifyPassword', 2, 2, 0, array(array($IcePHP__t_string), array($IcePHP__t_string)), null, array($IcePHP__t_int), array($Murmur__t_ServerBootedException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_ServerPrx, 'getTexture', 2, 2, 0, array(array($IcePHP__t_int)), null, array($Murmur__t_Texture), array($Murmur__t_ServerBootedException, $Murmur__t_InvalidUserException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_ServerPrx, 'setTexture', 2, 2, 0, array(array($IcePHP__t_int), array($Murmur__t_Texture)), null, null, array($Murmur__t_ServerBootedException, $Murmur__t_InvalidUserException, $Murmur__t_InvalidTextureException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_ServerPrx, 'getUptime', 2, 2, 0, null, null, array($IcePHP__t_int), array($Murmur__t_ServerBootedException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_ServerPrx, 'updateCertificate', 2, 2, 0, array(array($IcePHP__t_string), array($IcePHP__t_string), array($IcePHP__t_string)), null, null, array($Murmur__t_ServerBootedException, $Murmur__t_InvalidSecretException, $Murmur__t_InvalidInputDataException));
}

namespace Murmur
{
    global $Murmur__t_MetaCallback;
    global $Murmur__t_MetaCallbackPrx;

    class MetaCallbackPrxHelper
    {
        public static function checkedCast($proxy, $facetOrContext=null, $context=null)
        {
            return $proxy->ice_checkedCast('::Murmur::MetaCallback', $facetOrContext, $context);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::Murmur::MetaCallback', $facet);
        }

        public static function ice_staticId()
        {
            return '::Murmur::MetaCallback';
        }
    }
    $Murmur__t_MetaCallback = IcePHP_defineClass('::Murmur::MetaCallback', '\\Murmur\\MetaCallback', -1, false, true, null, null);

    global $Ice__t_ObjectPrx;
    $Murmur__t_MetaCallbackPrx = IcePHP_defineProxy('::Murmur::MetaCallback', $Ice__t_ObjectPrx, null);

    global $Murmur__t_ServerPrx;
    IcePHP_defineOperation($Murmur__t_MetaCallbackPrx, 'started', 0, 0, 0, array(array($Murmur__t_ServerPrx)), null, null, null);
    IcePHP_defineOperation($Murmur__t_MetaCallbackPrx, 'stopped', 0, 0, 0, array(array($Murmur__t_ServerPrx)), null, null, null);
}

namespace Murmur
{
    global $Murmur__t_ServerList;

    if(!isset($Murmur__t_ServerList))
    {
        global $Murmur__t_ServerPrx;
        $Murmur__t_ServerList = IcePHP_defineSequence('::Murmur::ServerList', $Murmur__t_ServerPrx);
    }
}

namespace Murmur
{
    global $Murmur__t_Meta;
    global $Murmur__t_MetaPrx;

    class MetaPrxHelper
    {
        public static function checkedCast($proxy, $facetOrContext=null, $context=null)
        {
            return $proxy->ice_checkedCast('::Murmur::Meta', $facetOrContext, $context);
        }

        public static function uncheckedCast($proxy, $facet=null)
        {
            return $proxy->ice_uncheckedCast('::Murmur::Meta', $facet);
        }

        public static function ice_staticId()
        {
            return '::Murmur::Meta';
        }
    }
    $Murmur__t_Meta = IcePHP_defineClass('::Murmur::Meta', '\\Murmur\\Meta', -1, false, true, null, null);

    global $Ice__t_ObjectPrx;
    $Murmur__t_MetaPrx = IcePHP_defineProxy('::Murmur::Meta', $Ice__t_ObjectPrx, null);

    global $IcePHP__t_int;
    global $Murmur__t_ServerPrx;
    global $Murmur__t_ServerList;
    global $Murmur__t_ConfigMap;
    global $IcePHP__t_string;
    global $Murmur__t_MetaCallbackPrx;
    global $Ice__t_SliceChecksumDict;
    IcePHP_defineOperation($Murmur__t_MetaPrx, 'getServer', 2, 2, 0, array(array($IcePHP__t_int)), null, array($Murmur__t_ServerPrx), array($Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_MetaPrx, 'newServer', 0, 0, 0, null, null, array($Murmur__t_ServerPrx), array($Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_MetaPrx, 'getBootedServers', 2, 2, 0, null, null, array($Murmur__t_ServerList), array($Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_MetaPrx, 'getAllServers', 2, 2, 0, null, null, array($Murmur__t_ServerList), array($Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_MetaPrx, 'getDefaultConf', 2, 2, 0, null, null, array($Murmur__t_ConfigMap), array($Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_MetaPrx, 'getVersion', 2, 2, 0, null, array(array($IcePHP__t_int), array($IcePHP__t_int), array($IcePHP__t_int), array($IcePHP__t_string)), null, null);
    IcePHP_defineOperation($Murmur__t_MetaPrx, 'addCallback', 0, 0, 0, array(array($Murmur__t_MetaCallbackPrx)), null, null, array($Murmur__t_InvalidCallbackException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_MetaPrx, 'removeCallback', 0, 0, 0, array(array($Murmur__t_MetaCallbackPrx)), null, null, array($Murmur__t_InvalidCallbackException, $Murmur__t_InvalidSecretException));
    IcePHP_defineOperation($Murmur__t_MetaPrx, 'getUptime', 2, 2, 0, null, null, array($IcePHP__t_int), null);
    IcePHP_defineOperation($Murmur__t_MetaPrx, 'getSlice', 2, 2, 0, null, null, array($IcePHP__t_string), null);
    IcePHP_defineOperation($Murmur__t_MetaPrx, 'getSliceChecksums', 2, 2, 0, null, null, array($Ice__t_SliceChecksumDict), null);
}
?>
